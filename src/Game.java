/*
 * Object that binds together all the intermediate code generated by Loom. Also provides functionality
 * for GameDriver class.
 *
 * Created by hugoj on 4/21/2017.
 */

import java.util.ArrayList;
import java.util.HashMap;

class Game {

    /* String = "node_n" where n is the number of the node, identifier in intermediate code
    *  Node = reference to node that has this identifier to intermediate code */
    private HashMap<String, Node> gameNodes;

    /* A history of nodes traversed thus far */
    private GameHistory currentGamePath;

    /* The identifier of the first node in game */
    private String setStartSection;

    Game(){
        gameNodes = new HashMap<>();
        currentGamePath = new GameHistory();
    }

    /**
     * Adds the given node to the Game object. Stores reference to Node object as well as the Node's identifier
     * as written in Loom code.
     *
     * @param newNode           reference to Node object generated by Loom
     * @param nodeIdentifier    component id of node as written in Loom code
     */
    void addNodesToGame(Node newNode, String nodeIdentifier){
        gameNodes.put(nodeIdentifier, newNode);
    }

    /**
     * Adds a reference to node that points to the target node given a certain option.
     *
     * @param nodeIntermediateIdentifier        the identifier of the source node
     * @param nodeOptionIdentifier              the option of the source node that will point to the taget node
     * @param nodeSourceIntermediateIdentifier  the target node
     */
    void addLinkToGame(String nodeIntermediateIdentifier, String nodeOptionIdentifier,
                              String nodeSourceIntermediateIdentifier){
        gameNodes.get(nodeIntermediateIdentifier).addLink(nodeOptionIdentifier, nodeSourceIntermediateIdentifier);
    }

    /**
     * Stores the current Game's path. Used to make sure If-Statement conditions are true.
     *
     * @param currentNode   the current node the GameDriver is using
     * @param op            the option selected by the user
     * @return              the option identifier of the option selected by the user
     */
    String trackHistory(Node currentNode, int op){
        String optionId = currentNode.nThOption(op);
        this.currentGamePath.add(currentNode, optionId);
        return optionId;
    }

    /**
     * Connects the end node of the source section to the start node of the target section as written in Loom code.
     *
     * @param nodeIntermediateIdentifier        identifier of source section
     * @param nodeSourceIntermediateIdentifier  identifier of target section
     */
    void connectSections(String nodeIntermediateIdentifier, String nodeSourceIntermediateIdentifier){
        gameNodes.get(nodeIntermediateIdentifier).connectToOtherSection(nodeSourceIntermediateIdentifier);
    }

    /**
     * Sets the game start node as written in Loom code.
     *
     * @param id    the identifier of the start node as written in Loom code.
     */
    void setStart(String id){
        this.setStartSection = id;
    }

    /**
     * Returns the Node designated as the start node by Loom
     *
     * @return      Node game will start at
     */
    Node getStart(){
        return this.getNodeByID(this.setStartSection);
    }

    /**
     * Returns the node text prompt and option Strings.
     *
     * @param currentNode   the node the GameDriver is current at
     * @return              a String to display the contents to the user
     */
    String getNodeContents(Node currentNode){
        return currentNode.getNodeTextPrompt() + "\n" +
                currentNode.getNodeOptions(currentGamePath) + "\n";
    }

    /**
     * Returns the number of options the given node has.
     *
     * @param currentNode   the node the GameDriver is current at
     * @return              the number of options the current node has
     */
    int getCurrentNodeNumberOfOptions(Node currentNode){
        return currentNode.getNumberOfOptions();
    }

    /**
     * Returns the Node object with the given identifier
     *
     * @param id    the identifier the requested Node will have
     * @return      a Node object if the identifier is valid, Null if otherwise
     */
    private Node getNodeByID(String id){
        for(Node n: gameNodes.values())
            if(id.equals(n.getNodeIdentifier()))
                return n;
        return null;
    }

    /**
     * Given a Node and an option, method will return the target Node the current Node references with the given
     * option.
     *
     * @param currentNode       the Node the GameDriver is currently at
     * @param optionSelected    the option selected by the user
     * @return                  the Node the current node references given the option selected
     */
    Node nextNode(Node currentNode, String optionSelected){
        if(optionSelected != null)
            return this.gameNodes.get(currentNode.traverseLink(optionSelected));
        return this.gameNodes.get(currentNode.getTransferLink());
    }

    /**
     * Class represents a Loom PAGE and holds references to other Nodes in order run Game.
     */
    static class Node{

        /* The Loom identifier of the current Node */
        private String nodeIdentifier;

        /* The Loom TEXT section contents */
        private String nodeTextPrompt;

        /* Identifier of a node this node points to if this node is the end of a Loom SECTION, null otherwise */
        private String transferLink;

        /* Map that stores all the Node's options and their text prompts
        * <OptionIdentifier, OptionTextPrompt> */
        private HashMap<String, String> optionMap;

        /* Map that stores all the Node's references to other nodes as written in Loom code
        * <OptionIdentifier, NodeIdentifier> */
        private HashMap<String, String> nodeLinks;

        /* Determines whether a given option is an If-Statement option
        * <OptionIdentifier, Reference> */
        private HashMap<String, String> ifOption;

        /* The number of options a user was shown */
        private int optionsDisplayToUser;

        Node(String id, String text){
            this.nodeIdentifier = id;
            this.nodeTextPrompt = text;

            this.transferLink = null;
            this.optionMap = new HashMap<>();
            this.nodeLinks = new HashMap<>();
            this.ifOption = new HashMap<>();
        }

        /**
         * Interprets a Loom PAGE option and stores it in option map. For backwards comparability, assumes by default
         * given option is not If-Statement dependant.
         *
         * @param id        the option identifier of the option to add
         * @param text      the text of the option to add
         */
        void addOption(String id, String text){
            this.optionMap.put(id, text);
            this.ifOption.put(id, null);
        }

        /**
         * Interprets a Loom IF_STATEMENT and stores it in option map.
         *
         * @param id                        the option identifier
         * @param text                      the option text
         * @param conditionalOption         the option needed in GameHistory for statement to be true
         * @param conditionalOptionSource   the identifier of the page the conditional option above is in
         */
        void addIfOption(String id, String text, String conditionalOption, String conditionalOptionSource){
            this.addOption(id, text);
            this.ifOption.put(id, conditionalOption + "," + conditionalOptionSource);
        }

        /**
         * Interprets a Loom CHAPTER LINK
         *
         * @param opId      the option identifier to associate with the given node
         * @param nodeId    given the option above is selected, user should see this node
         */
        void addLink(String opId, String nodeId){
            this.nodeLinks.put(opId, nodeId);
        }

        /**
         * Jumps from current node to the node associated with the given option identifier
         *
         * @param opId      identifier of option selected
         * @return          the node associated with that option
         */
        String traverseLink(String opId){
            return this.nodeLinks.get(opId);
        }

        /**
         * Links this node with another node without the need of an option being selected. Used to link END and START
         * sections of Loom SECTIONs.
         *
         * @param sectionStart      the start node of the section this section should lead to
         */
        void connectToOtherSection(String sectionStart){
            this.transferLink = sectionStart;
        }

        /**
         * Returns node text prompt
         *
         * @return      String of text prompt to display to user
         */
        String getNodeTextPrompt(){
            return this.nodeTextPrompt;
        }

        /**
         * Prints all options a user should have access to. Determines if a given option's conditional statement is
         * true.
         *
         * @param currentGamePath   the options and nodes traversed by the current Game
         * @return                  a String to display to the user of all options available
         */
        String getNodeOptions(GameHistory currentGamePath){
            StringBuilder gen = new StringBuilder();

            int index = 1;
            for(String optionKey : this.optionMap.keySet()) {
                String optionText = this.optionMap.get(optionKey);
                String conditionals = this.ifOption.get(optionKey);
                if(conditionals == null) {
                    String header = "(" + index + ") ";
                    gen.append(header).append(optionText).append("\n");
                    index++;
                }else{
                    String args [] = conditionals.split(",");
                    if(currentGamePath.inHistory(args[1], args[0])){
                        String header = "(" + index + ") ";
                        gen.append(header).append(optionText).append("\n");
                        index++;
                    }
                }
            }

            this.optionsDisplayToUser = index - 1;
            return gen.toString();
        }

        /**
         * Getter method.
         *
         * @return      value of node identifier
         */
        String getNodeIdentifier(){
            return this.nodeIdentifier;
        }

        /**
         * Getter method.
         *
         * @return      number of options node has
         */
        int getNumberOfOptions(){
            return this.optionsDisplayToUser;
        }

        /**
         * Given the number of the option selected by the user, this method will return that option's identifier
         *
         * @param n     index of option selected
         * @return      the identifier of the option selected
         */
        String nThOption(int n){
            int i = 1;
            for(String key: this.optionMap.keySet()){
                if(i == n)
                    return key;
                i++;
            }
            return null;
        }

        /**
         * @return      True if this node is an END node, false otherwise
         */
        boolean hasTransferLink(){
            return this.transferLink != null;
        }

        /**
         * @return      returns value of transferLink
         */
        String getTransferLink(){
            return this.transferLink;
        }
    }

    /**
     * Class used to track all the options and Nodes traversed by a user in for a given Game.
     */
    private static class GameHistory{

        /* List of identifiers of Nodes traversed */
        private ArrayList<String> listOfNodeIdentifiers;

        /* List of options selected at the nodes stored in listOfNodeIdentifiers*/
        private ArrayList<String> optionSelected;

        GameHistory(){
            this.listOfNodeIdentifiers = new ArrayList<>();
            this.optionSelected = new ArrayList<>();
        }

        /**
         * Adds to game history.
         *
         * @param currentNode   the Node the GameDriver is currently at
         * @param op            the option at the current Node the user selected
         */
        void add(Node currentNode, String op){
            this.listOfNodeIdentifiers.add(currentNode.getNodeIdentifier());
            this.optionSelected.add(op);
        }

        /**
         * Determines if a given Node and option were traversed/selected by the user.
         *
         * @param id        identifier of node
         * @param op        identifier of option
         * @return          True if the inputs are in the game history, false otherwise
         */
        boolean inHistory(String id, String op){
            return this.listOfNodeIdentifiers.contains(id) && this.optionSelected.contains(op);
        }
    }
}
